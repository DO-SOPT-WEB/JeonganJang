{"ast":null,"code":"var _jsxFileName = \"/Users/jangjeong-an/JeonganJang/week3/src/components/main/Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport StartScreen from \"./StartScreen\";\nimport CategoryScreen from \"./CategoryScreen\";\nimport MenuSelectionScreen from \"./MenuSelectionScreen\";\nimport FoodTypeSelection from \"./FoodTypeSelect\";\nimport StepOne from \"./stepOne/StepOne\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [step, setStep] = useState(1); // 현재 단계\n  const [selections, setSelections] = useState({\n    recommendationType: \"\",\n    cuisine: \"\",\n    dishType: \"\",\n    soup: \"\"\n  });\n  const handleNext = selection => {\n    setSelections(prevSelections => ({\n      ...prevSelections,\n      ...selection\n    }));\n    setStep(prevStep => prevStep + 1);\n  };\n  const handleBack = () => {\n    setStep(prevStep => prevStep - 1);\n  };\n  const handleReset = () => {\n    setSelections({\n      recommendationType: \"\",\n      cuisine: \"\",\n      dishType: \"\",\n      soup: \"\"\n    });\n    setStep(1);\n  };\n  switch (step) {\n    case 1:\n      return /*#__PURE__*/_jsxDEV(StepOne, {\n        onChoose: handleNext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    // case 2:\n    //   return (\n    //     <StepTwo\n    //       onChoose={handleNext}\n    //       onBack={handleBack}\n    //       currentSelection={selections.cuisine}\n    //     />\n    //   );\n    // ... 이하 단계별 컴포넌트 설정\n    default:\n    //   return <FinalStep selection={selections} onReset={handleReset} />;\n  }\n};\n\n// StepOne, StepTwo, ... 컴포넌트를 각각 정의합니다.\n// 각 컴포넌트 내에서는 props로 받은 onChoose, onBack 함수를 호출하여 상태를 변경합니다.\n_s(Main, \"KPfKgWQYp1MgPjbDAHnZ7cCaMZI=\");\n_c = Main;\nexport default Main;\n\n//   const [screen, setScreen] = useState(\"start\"); // 현재 화면 상태\n//   const [cuisine, setCuisine] = useState(\"\"); // 사용자가 선택한 음식 종류\n\n//   const handleStartSelection = (selection) => {\n//     // '취향대로 추천' 선택 시\n//     if (selection === \"preference\") {\n//       setScreen(\"cuisineSelection\");\n//     } else {\n//       // TODO '랜덤 추천' 선택 시, 랜덤 로직 구현\n\n//       setScreen(\"result\");\n//     }\n//   };\n\n//   const handleCategorySelection = (type) => {\n//     setCuisine(type); // 사용자가 선택한 음식 종류 상태 업데이트\n//     setScreen(\"menuSelection\");\n//   };\n\n//   const handleMenuSelection = (menu) => {\n//     // 메뉴 선택 후 결과 화면으로\n//     // ...\n//     setScreen(\"result\");\n//   };\n\n//   switch (screen) {\n//     case \"start\":\n//       return <StartScreen onSelect={handleStartSelection} />;\n//     case \"cuisineSelection\":\n//       return <CategoryScreen onSelect={handleCategorySelection} />;\n//     case \"menuSelection\":\n//       return (\n//         <FoodTypeSelection cuisine={cuisine} onSelect={handleMenuSelection} />\n//       );\n//     //   case 'result':\n//     //     // 결과 화면 컴포넌트\n//     //     // ...\n//     //     return <div>선택한 메뉴: ...</div>;\n//     default:\n//       return <div>잘못된 접근입니다.</div>;\n//   }\n// };\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","StartScreen","CategoryScreen","MenuSelectionScreen","FoodTypeSelection","StepOne","jsxDEV","_jsxDEV","Main","_s","step","setStep","selections","setSelections","recommendationType","cuisine","dishType","soup","handleNext","selection","prevSelections","prevStep","handleBack","handleReset","onChoose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jangjeong-an/JeonganJang/week3/src/components/main/Main.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport StartScreen from \"./StartScreen\";\nimport CategoryScreen from \"./CategoryScreen\";\nimport MenuSelectionScreen from \"./MenuSelectionScreen\";\nimport FoodTypeSelection from \"./FoodTypeSelect\";\nimport StepOne from \"./stepOne/StepOne\";\n\nconst Main = () => {\n  const [step, setStep] = useState(1); // 현재 단계\n  const [selections, setSelections] = useState({\n    recommendationType: \"\",\n    cuisine: \"\",\n    dishType: \"\",\n    soup: \"\",\n  });\n\n  const handleNext = (selection) => {\n    setSelections((prevSelections) => ({\n      ...prevSelections,\n      ...selection,\n    }));\n    setStep((prevStep) => prevStep + 1);\n  };\n\n  const handleBack = () => {\n    setStep((prevStep) => prevStep - 1);\n  };\n\n  const handleReset = () => {\n    setSelections({\n      recommendationType: \"\",\n      cuisine: \"\",\n      dishType: \"\",\n      soup: \"\",\n    });\n    setStep(1);\n  };\n\n  switch (step) {\n    case 1:\n      return <StepOne onChoose={handleNext} />;\n    // case 2:\n    //   return (\n    //     <StepTwo\n    //       onChoose={handleNext}\n    //       onBack={handleBack}\n    //       currentSelection={selections.cuisine}\n    //     />\n    //   );\n    // ... 이하 단계별 컴포넌트 설정\n    default:\n    //   return <FinalStep selection={selections} onReset={handleReset} />;\n  }\n};\n\n// StepOne, StepTwo, ... 컴포넌트를 각각 정의합니다.\n// 각 컴포넌트 내에서는 props로 받은 onChoose, onBack 함수를 호출하여 상태를 변경합니다.\n\nexport default Main;\n\n//   const [screen, setScreen] = useState(\"start\"); // 현재 화면 상태\n//   const [cuisine, setCuisine] = useState(\"\"); // 사용자가 선택한 음식 종류\n\n//   const handleStartSelection = (selection) => {\n//     // '취향대로 추천' 선택 시\n//     if (selection === \"preference\") {\n//       setScreen(\"cuisineSelection\");\n//     } else {\n//       // TODO '랜덤 추천' 선택 시, 랜덤 로직 구현\n\n//       setScreen(\"result\");\n//     }\n//   };\n\n//   const handleCategorySelection = (type) => {\n//     setCuisine(type); // 사용자가 선택한 음식 종류 상태 업데이트\n//     setScreen(\"menuSelection\");\n//   };\n\n//   const handleMenuSelection = (menu) => {\n//     // 메뉴 선택 후 결과 화면으로\n//     // ...\n//     setScreen(\"result\");\n//   };\n\n//   switch (screen) {\n//     case \"start\":\n//       return <StartScreen onSelect={handleStartSelection} />;\n//     case \"cuisineSelection\":\n//       return <CategoryScreen onSelect={handleCategorySelection} />;\n//     case \"menuSelection\":\n//       return (\n//         <FoodTypeSelection cuisine={cuisine} onSelect={handleMenuSelection} />\n//       );\n//     //   case 'result':\n//     //     // 결과 화면 컴포넌트\n//     //     // ...\n//     //     return <div>선택한 메뉴: ...</div>;\n//     default:\n//       return <div>잘못된 접근입니다.</div>;\n//   }\n// };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,iBAAiB,MAAM,kBAAkB;AAChD,OAAOC,OAAO,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC;IAC3Cc,kBAAkB,EAAE,EAAE;IACtBC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAIC,SAAS,IAAK;IAChCN,aAAa,CAAEO,cAAc,KAAM;MACjC,GAAGA,cAAc;MACjB,GAAGD;IACL,CAAC,CAAC,CAAC;IACHR,OAAO,CAAEU,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EACrC,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBX,OAAO,CAAEU,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EACrC,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxBV,aAAa,CAAC;MACZC,kBAAkB,EAAE,EAAE;MACtBC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE;IACR,CAAC,CAAC;IACFN,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,QAAQD,IAAI;IACV,KAAK,CAAC;MACJ,oBAAOH,OAAA,CAACF,OAAO;QAACmB,QAAQ,EAAEN;MAAW;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC1C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC;;AAED;AACA;AAAAnB,EAAA,CAjDMD,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AAmDV,eAAeA,IAAI;;AAEnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}